// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	models "github.com/joaofilippe/americanas-desafio/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// IListNodeRepository is an autogenerated mock type for the IListNodeRepository type
type IListNodeRepository struct {
	mock.Mock
}

// InsertLists provides a mock function with given fields: lists
func (_m *IListNodeRepository) InsertLists(lists []*models.ListNode) (int64, error) {
	ret := _m.Called(lists)

	if len(ret) == 0 {
		panic("no return value specified for InsertLists")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func([]*models.ListNode) (int64, error)); ok {
		return rf(lists)
	}
	if rf, ok := ret.Get(0).(func([]*models.ListNode) int64); ok {
		r0 = rf(lists)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func([]*models.ListNode) error); ok {
		r1 = rf(lists)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectLists provides a mock function with given fields: id
func (_m *IListNodeRepository) SelectLists(id int64) ([]*models.ListNode, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectLists")
	}

	var r0 []*models.ListNode
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*models.ListNode, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) []*models.ListNode); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ListNode)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMergedList provides a mock function with given fields: mergedList, id
func (_m *IListNodeRepository) UpdateMergedList(mergedList models.ListNode, id int64) error {
	ret := _m.Called(mergedList, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMergedList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ListNode, int64) error); ok {
		r0 = rf(mergedList, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIListNodeRepository creates a new instance of IListNodeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIListNodeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IListNodeRepository {
	mock := &IListNodeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
